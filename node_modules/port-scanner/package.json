{
  "name": "port-scanner",
  "version": "0.0.4",
  "private": false,
  "description": "port scanner to find which port are open/close or behind a firewall black-hole",
  "author": {
    "name": "Li Yong",
    "email": "kaven276@vip.sina.com"
  },
  "repository": "",
  "keywords": [
    "scan",
    "port",
    "hack"
  ],
  "main": "lib/scanner.js",
  "dependencies": {
    "node-queue-pool": "*"
  },
  "optionDependencies": {
    "express": ">3",
    "less": "*",
    "jade": "*",
    "marked": "*"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "readme": "installation\n==============\nnpm -g install port-scanner\n\n\nAPI\n==============\n\nfunction scanPorts(ip, checkFirewall, startPort:=1, endPort:=65535, option)\n\noption\n\n* logStepCount : at this multiple of number, scanner will print the progress info\n* namedPorts : port to name(comment) map, used to show result with remarks\n\n\nexample\n==============\n\n```\nvar scanPorts = require('port-scanner')\n\t;\nscanPorts('noradle.com', false, 8000, 9000, {\n  logStepCount : 0,\n  namedPorts : {\n    80 : 'noradle main website',\n    443 : 'noradle main website (https)',\n\n    81 : 'noradle test main website',\n    444 : 'noradle test main website (https)',\n\n    8010 : 'psp oracle (test)',\n    8011 : 'file http (test)',\n    8012 : 'sms oracle(test)',\n    8013 : 'sms proxy(p2p) (test)',\n    8014 : 'sms proxy(simple) (test)',\n    8015 : 'sms proxy(bulk) (test)',\n    8016 : 'IM http (test)',\n    8017 : 'evac http test',\n    8018 : 'exthub oracle (test)',\n    8019 : 'IM oracle (test)',\n    8021 : 'psp http (test)',\n    9008 : 'telen http test',\n\n    8000 : 'psp oracle (prod)',\n    8001 : 'file http (prod)',\n    8002 : 'sms oracle(prod)',\n    8003 : 'sms proxy(p2p) (prod)',\n    8004 : 'sms proxy(simple) (prod)',\n    8005 : 'sms proxy(bulk) (prod)',\n    8006 : 'IM http (prod)',\n    8007 : 'evac http prod',\n    8008 : 'exthub oracle (prod)',\n    8009 : 'IM oracle (prod)',\n    8020 : 'psp http (prod)',\n    9003 : 'telen http prod'\n  }});\n```\n\nattacker\n==========\n\n如果想要被攻击服务进程数满锁死，就connect该服务的端口，并且不发送数据。\n如果对方服务器在接受新的 socket 连接后启动新的服务进程或线程，那么很快它就会到达最大进程数或最大线程数，从而 hung 死，拒绝接受新的请求。\n\nCoyote框架 可能不会在请求发完前就生成新的线程。\n\n如果对方是 ngix/nodejs 的 web server，那么没有形成完整的请求前，是不会调用传统多进程多线程软件的，因此暂时无法攻击他们。\n但是，如果对方的 servlet，比如说 java 的，要是有占用进程线程的部分，比如说 sleep 或者调用 db，那么还是可以攻击他们。\n如果他们的代码中有延时执行的部分，比如说 sleep 就可以发出大量请求让他们的 sleep 代码的所以大量的线程数进程数。\n\n\nLAN arp\n===========\n\n扫描子网的全部可用IP地址，看看哪些IP可用，哪些IP不可用。\n可以使用一台机器占用全部局域网IP地址，进行破坏。\n\ntodo\n-----\n* give ip/prefix for subnet\n* automatically get / page, show header \"server\",\"x-powered-by\" and html \"title\"",
  "readmeFilename": "README.md",
  "_id": "port-scanner@0.0.4",
  "dist": {
    "shasum": "3caaebe27db814fb5d75359934e0b621b030bdf7"
  },
  "_from": "port-scanner@",
  "_resolved": "https://registry.npmjs.org/port-scanner/-/port-scanner-0.0.4.tgz"
}
