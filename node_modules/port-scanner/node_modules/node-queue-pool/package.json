{
  "name": "node-queue-pool",
  "version": "0.0.2",
  "description": "manage concurrent actions/jobs, manage limits resource",
  "keywords": [
    "connection",
    "pool",
    "queue",
    "resource",
    "priority",
    "weight"
  ],
  "maintainers": [
    {
      "name": "Yong Li",
      "email": "kaven276@vip.sina.com",
      "url": "https://github.com/kaven276"
    }
  ],
  "bugs": {
    "url": "http://github.com/kaven276/node-queue-pool/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/kaven276/node-queue-pool.git"
  },
  "dependencies": {},
  "engines": {
    "node": ">=0.6.2"
  },
  "directories": {
    "lib": "lib"
  },
  "main": "./main.js",
  "readme": "由来\n===========================\n\n应该说 javascript 的核心就是异步处理，每一个执行的动作只要是涉及到I/O的，几乎都是异步处理。因此当我们做任何异步操作时，如通过网络发送各类请求，都需要一些通用的异步处理机制。包括限制并发数，限制速率，超时检测和处理，操作日志和统计，结果收集等等。鉴于这些需求具有通用性，因此我设计 super-queue 来一揽子的支持这些需求。super-queue 对异步的 javascript 具有基础性，应该成为其他各种各样的 javascript 库和模块的基础模块。\n\n\nComparison to other Modules\n===========================\n\nlist\n----\n\n* https://github.com/codingforce/poolr\n* https://github.com/fent/timequeue.js\n* https://github.com/caolan/async\n\nunique features\n---------------\n\n* priority control, urgent action call\n* suspend / resume control\n* timeout control\n* sync execution that return will do callback(null,rval), exception will do callback(err), and not count for statistics\n* statistics\n* versatile control methods, by mere concurrency or by mere execute rate, by active or passive resource available\n* can pass a container to mount result to the result tree\n* can pass fn only, if want pass data, use wrapper is ok, simple uniform API\n* do not known which data is passed to Queue, more secure\n* can pass desc for logging for every action\n* serializable and can save to and recover from disk\n* know when all is done, or when maxError is reached, and can just quit ahead when the goal is hit(used to support all async collection APIs)\n* by batch. when state reach queue, do pause, when drain, collect them to do a batch job\n\n\n名言\n-----\n\none async call can use classic callback to drive to next code,\nall cases there is more than one async call concurrently will utilize ActionQueue.\nso async code have only two pattens.\nuse ActionQueue to synthesize concurrent async calls to a classic callback based async function\n\n不支持的特性\n----------\n\n* waterfall/step 模式不支持，因为只要用简单的chain回调即可，都是受控串行执行，和 queue 完全没有关系\n* 如果依赖2个以上的异步结果，就不能用 chain 模式了，应该使用 queue(async.map,async.cache) 来获得结束事件，并得到结果数组或结果对象\n  可以说，只要有并行存在都可以使用 queue.push.end, async.map, async.cache 来获得结束事件和结果参数\n\n* 如果不支持 queue, 而是进入队列都执行，那么 queue 的意义就在于触发 close(err,result) 事件，\n  这样一个 queue wrapper 就成为了一个标准的 NodeJS 异步函数，\n  其最后一个参数为结束回调 cb(err,result)\n\n* q.result 可以自行定义，每步活动都可以进行修改利用。但是对 ActionQueue 完全透明，ActionQueue 不会自动处理和记录 q.result，因为它只负责任务管理本身，而不触及任务的结果。这和 ActionQueue 不问入参，不问结果的哲理相符。\n\n* cache 入参和结果的关系完全在 cache 模块完成\n\n  return cache(key) || function() {\n    do real sync or async work, and finally return/throw/callback\n  }\n\n  and since ActionQueue do not know act parameters, so it can not support cache for lack of key\n\n\n应用场景\n======\n\n* 利用并发限制特性，结合 superagent,jsdom 进行网站扫描，压力测试、数据抓取、动态网站转换、移动办公、模拟点击等等\n* 利用关闭事件触发机制，支持 async, 并发异步转换为标准 callback based 异步函数的机制\n\n\n复杂的特性\n——------\n\n* 可以同时支持并发控制和速率控制，先到先控制\n* 可以支持自由、主动资源、被动资源的任选一个，即某个请求必须先得到空闲资源后才能执行，资源可以是 slot 号，或者是具体的资源。\n\n// a simple wrapper that can enqueue different parameters\nfunction wrapper1(p1,p2,p3,...) {\n\tpq.enqueue(1,'desc',(function(rc,rcb) {\n  \t// some content variables\n  \t// for p1,p2,p3\n  \t// do something async\n  \trcb(returnValue);\n\t}));\n}\n\n// a more complex wrapper that can cache anync operation result and reuse it\nfunction wrapper2(p1,p2,p3,...) {\n  var cacheValue = cache[[p1,p2,p3]];\n  if(cacheValue&&cacheValue.isFresh()) return cacheValue;\n\tpq.enqueue(1,'desc',(function(rc,rcb) {\n  \t// some content variables\n  \t// for p1,p2,p3\n  \t// do something async\n  \t// use result as a cache\n  \tcache[[p1,p2,p3]] = new cacheItem(returnValue);\n  \trcb(returnValue);\n\t}));\n}\n\nwrapper1(1,2,3);\nwrapper2(4,5,6);\n\nfs.stat('file1');\nfs.stat('file2');\nfs.stat('file3');\nfs.stat('file4');\n\npq.enqueue('file1',fs.stat,1,desc);\npq.enqueue('file2',fs.stat,1,desc);\npq.enqueue('file3',fs.stat,1,desc);\nAQ.enqueue('file4',fs.stat,1,desc);\n可以控制 fs.stat 的并发度\npq.results 为每次执行的结果，保存为数组。\n还可以同时保存为 cache.\n\n和 async 比较\n\nActionQueue\n\t.setMaxErrors()\n\t.setTimeout()\n\t.on('end',function(errors,results) {\n\t  ...\n\t});\n\n\n\n### or more simple\n\nnew ActionQueue()\n\n\t.forEach(fs.write) // 只确保完成，不报错即可\n\t.filter(fs.exists) // 记录返回 true 的入参\n\t.reject(fs.exists) // 记录返回假的入参\n\t.map(fs.stat) // 在确保不报错完成的基础上，记录结果\n\t.concat(fs.readdir) // 将结果数组合并\n\t.sortBy() // 按照结果的顺序排序入参\n\t.cache(fs.stat) // 在确保不报错完成的基础上，记录参数到结果的 mapping 关系\n\t.detect(fs.exists) // 得到第一个存在的文件\n\t.some(fs.exists) // 如果存在则返回 true, 其实和 detect 一样\n\t.every(fs.exists) // 如果都返回 true, 如果一项为假，立即返回 false；否则最终返回 true\n\n\t.enqueue(files)\n\t.onFin(function(errors,results) {...})\n\t.enqueue(data,{name:result key, priority:, desc:...});\n\t.end(); // 标明不再有新的任务进入，否则相关 resultHandler 不能认为完成\n\t;\n\ndata 只能有一个，是一个 json object\n\n\n\nthink list\n==========\n\n1. 基于 slot，真的重要吗；直接一个 busyList,一个 freeList 不行吗；这样释放 busyList 的资源时，需要找准，只能通过扫描\n2. 不对资源实例做任何读写，完全透明\n3. 可以控制 free slot 按照什么顺序，是尽量复用少数资源，还是尽量分摊资源\n4. 资源数量是固定的，如 oracle 反向连接数，如扫描网页的数量等等\n5. 资源可以是虚的，也可仅仅简单的控制并发数\n6. 设计设定激发资源占满和快要占满的事件，用于动态扩展资源\n7. 设计设定激发资源占用率低的事件，用于动态删除资源\n8. 可以设定资源超时时长，如果长时间不释放资源，升起事件，参数为资源\n9. 资源可以是一个 action 行动\n10. 性能优化，可以频繁的添加删除资源，频繁的占用释放资源，性能不受影响\n\n如果异步动作间没有关系，那么他们就一起执行好了，最多收到并发控制。\n如果异步动作间存在关系，那么：\n1、act1 在执行 执行完后，调用后续步骤的 act2(err,result) act3(err,result) 好了，这个属于上一步知道下一步是什么\n  对于 module-step 来讲，下一步就是动作数组的下一项，上一步无需知道下一步的名字，下一步不也无需名字\n  对于 module-fnqueue 来讲，下一步就是形参中依赖本动作的其他动作，这要求每步都要有名字用于说明依赖关系\n  module-fnqueue 支持并发等更为复杂的模型，入参技能接受被依赖过程的结果，又能通过 this 来产生共享的结果，\n  当然也可以通过外部变量产生共享结果。\n  module-fnqueue 可以描述复杂的依赖关系，更为通用\n\n  if (检查文件是否存在).then(function(){\n  if 存在\n\n  else 不存在\n    动态重建一个\n  }\n\n如果每个异步过程就是一个已有的标准异步过程，如\nafunc(p1,p2,..,cb(err,result))\n\n那么 ActionQueue 就可以 push 它，aq.push(afunc,p1,p2,p3, rhandle);\n这样就会调用 afunc(p1,p2,p3,cb(err,result)) 并将 result 带入 rhandle(input,result,idx)\n如果遇到 cb(err) 则不调用 rhandle\n因为其实每步 act 其中其实就是一个已有过程，可能在 nodeJS 中已经定义号，现在只要通过 rhandle 接受结果继续执行即可。\n同时可以支持 cache 了。\n\nDesign Features\n==================\n\n* 并发基于 slots\n* 每个 slot 记录正在执行操作的开始执行时间，因此可以为每个正在执行的动作产生超时\n* 每个 slot 也记录正在执行操作的简洁，因此可以在超时时输出带有简介的日志\n* 有了超时后，可以防止哪些执行出去就没有反应的动作一直占用一个并发数，最终可能导致完全停止\n\n* 队列优先级别机制\n\n* 任务对活动队列完全透明，不读写任何任务相关数据\n* 活动也完全不了解活动队列\n\nAPI documentation\n=================\n\nvar ActionQueue = new require('node-queue-pool').ActionQueue\n  , aq = new ActionQueue(maxConcurrency, timeout in milliseconds, maxPriority)\n  ;\n\n### create a action queue\n\n\n### add a action to queue\n\naq.queue(act)\n\nWhen act is about to execute, pass fin callback as the only one parameter, act call fin() when the action is finished\n\nif call fin with error object, ActionQueue will count the execution as failure.\n\nAccording to the logging setting, ActionQueue will log the error.\n\n\ncomparison between direct execution and throttled queued execution\n------------------------------------------------------------------\n\n\tfunction someThingToDo(p1,p2,p3,...) {\n\t\t...\n\t}\n\n### direct execution\n\nsomeThingToDo();\n\n### throttled exection\n\nchange someThingToDo to\n\n\tfunction someThingToDo(p1,p2,p3,...) {\n\t\taq.queue(function actual(fin) {\n\t\t\t...\n\t\t\tfin();\n\t\t}\n\t}\n\nwrap all code in someThingToDo with a closure, and pass it in to aq.queue al all work to do!\n\nThis way, all former code calling someThingToDo is not forced to change, but someThingToDo is upgraded to throttled version.\n\n\nfuture plan\n==============\n\n* allow pause/resume, this can void problems with restart\n* allow dynamic tune concurrency, if it find\n* trace state(empty,normal,throttled,overwhelm)\n* emit event(drain,active,relieved,throttle,overload)\n* logging start,finish,failure of actions\n* efficient schedule a action to execute at the specified time.\n\ncongestion resolve\n============\n\n如果大量请求要求执行，而并发数不够或者资源池中没有可用的资源，那么请求就要排队。\n一个任务要是排队时间太长，可以允许它取消执行，\n\n资源等待超时\n-----\n方法就是在全局设定排队超时门限，或是在每个等待任务上设置排队超时门限，\n然后其后台 setTimeout 设定按照最近排队超时时间定时，查看排队有无执行完，\n若没执行完，则执行活动，并带入 error 参数。\n若执行完，则要查找最近需完成的任务的时间，继续 setTimeout 重复上述步骤，\n查找算法为全部队列扫描法（如果允许为每个任务分别设定不同的超时要求的化）\n如果要为每个任务单独设定超时，那么就要按照每个任务单独设置 timer.\n\n\n任务执行超时\n-----\n任务执行时间过长后，触发超时事件，这时可以尽快释放资源。\n\nRC 需要有一个 wrapper\n------\n\n这样，就可以设置 busy rc 属性，包括\n* startTime\n* timeoutTime\n* event:timeout\n* rc.release() 用于释放资源，还原到资源池中\n* rc.setTimeout(2000, clearCB(rc));\n\n或者不设 handle ，而是设置一个 slot 同步的 handle\n\npool.priority(3).timeout(3).desc('a action').require(then(rc,fin){});\n\npool.require( { priority:2, timeout:3000, desc:'xxx'}, then(rc,fin));\n\npool.require(priority,then(rc,fin) {\n  ...\n  fin();\n}\n\npool.setExecTimeout(2000,function(slot) {\n\n});\n\n\n\npool&queue interface\n---------------\n\n### pq.enqueue(options, then(rc,fin))\n1. ActionQueue rc = slot id\n2. any pool rc = rc\n\nthen(fin)\nthen(rc,fin)\nthen(fin,key,idx)\n\n如果总是有上一步驱动下一步那就简单了，在上一步的结束部分调用下一步好了\n\n### pq.usePriorityQueue\n\n### pq.setExecTimeout\n\n  设置统一的超时执行时间，不设则默认不超时，可能造成资源不能回收，影响并发度\n\n### pq.setWaitTimeout\n\n  设置统一的等待时间，不设则默认不超时，可能造成持有非常长的队列，其中存在过期执行无效的内容\n\n### pq.suspend()\n\n  暂停队列执行，已执行的都继续执行，排队等待的任务不再调度。全部已执行都完毕后触发 suspended 事件。\n\n### pq.resume()\n\n  继续运行，将登录队列中的任务调度执行。\n\nsupport case\n==============\n\n纯粹控制并发度\n------------\n比如说对于 web spider 软件来说，比如说 noradle 平台下企号通网站的压力测试，有比如说沃阅读模拟阅读支持考核的软件。\n\n控制资源池\n------------\n如各种客户端\n\n控制被动资源池\n-------------\n如 Noradle 的 oracle 反向连接\n\n控制速率\n-----------\n这个不是控制并发度，而是控制单位时间内发送的请求量\n如 20/s\n\n自适应控制速率\n-----------\n如错误太多或超时太多自动降低速率\n\ncounter threshold\n------------\n针对某个",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/kaven276/node-queue-pool",
  "_id": "node-queue-pool@0.0.2",
  "dist": {
    "shasum": "ca7fa2cfbc9a71969affbf3c28be2f9dc66abd5f"
  },
  "_from": "node-queue-pool@*",
  "_resolved": "https://registry.npmjs.org/node-queue-pool/-/node-queue-pool-0.0.2.tgz"
}
